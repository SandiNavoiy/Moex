# –ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É

from dataclasses import dataclass
import matplotlib.pyplot as plt

@dataclass
class CompanyData:
    name: str
    projected_net_profit: float  # –ø—Ä–æ–≥–Ω–æ–∑ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏, –º–ª—Ä–¥ —Ä—É–±
    historical_pe: float         # —Å—Ä–µ–¥–Ω–µ–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π P/E
    shares_outstanding: float    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π, –º–ª—Ä–¥ —à—Ç

    revenue: float               # –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏
    operating_expenses: float    # –ø—Ä–æ–≥–Ω–æ–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    net_debt: float              # —á–∏—Å—Ç—ã–π –¥–æ–ª–≥
    interest_rate: float         # —Å—Ç–∞–≤–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–æ–ª–≥–∞
    total_assets: float = None   # –∞–∫—Ç–∏–≤—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Debt/Assets
    total_equity: float = None   # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
    ebitda: float = None         # EBITDA –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Net Debt/EBITDA
    free_cash_flow: float = None # —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ (FCF)
    market_cap: float = None     # —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –º–ª—Ä–¥ —Ä—É–±
    tax_rate: float = 0.25       # –Ω–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25%)

    def forecast_profit(self):
        financial_expenses = self.net_debt * self.interest_rate
        ebt = self.revenue - self.operating_expenses - financial_expenses
        net_profit = ebt * (1 - self.tax_rate)
        return net_profit

    def fair_price(self):
        net_profit = self.forecast_profit()
        return round((net_profit * self.historical_pe) / self.shares_outstanding, 2)

    def calc_multiples(self):
        multiples = {}
        warnings = {}

        if self.market_cap and self.projected_net_profit:
            pe = self.market_cap / self.projected_net_profit
            multiples['P/E'] = round(pe, 2)
            if pe > 20 or pe < 2:
                warnings['P/E'] = "–û–ø–∞—Å–Ω–æ"
            elif 2 <= pe <= 5 or 15 <= pe <= 20:
                warnings['P/E'] = "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ"
            else:
                warnings['P/E'] = "OK"

        if self.market_cap and self.total_equity:
            pbv = self.market_cap / self.total_equity
            multiples['P/BV'] = round(pbv, 2)
            if pbv < 0.3 or pbv > 3:
                warnings['P/BV'] = "–û–ø–∞—Å–Ω–æ"
            elif 0.3 <= pbv <= 0.5 or 2 <= pbv <= 3:
                warnings['P/BV'] = "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ"
            else:
                warnings['P/BV'] = "OK"

        if self.market_cap and self.free_cash_flow:
            pfcf = self.market_cap / self.free_cash_flow
            multiples['P/FCF'] = round(pfcf, 2)
            if pfcf > 20:
                warnings['P/FCF'] = "–û–ø–∞—Å–Ω–æ"
            elif 15 <= pfcf <= 20:
                warnings['P/FCF'] = "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ"
            else:
                warnings['P/FCF'] = "OK"

        if self.net_debt and self.ebitda:
            nde = self.net_debt / self.ebitda
            multiples['Net Debt/EBITDA'] = round(nde, 2)
            if nde > 3:
                warnings['Net Debt/EBITDA'] = "–û–ø–∞—Å–Ω–æ"
            elif 2 <= nde <= 3:
                warnings['Net Debt/EBITDA'] = "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ"
            else:
                warnings['Net Debt/EBITDA'] = "OK"

        if self.total_equity:
            de = self.net_debt / self.total_equity
            multiples['Debt/Equity'] = round(de, 2)
            if de > 3:
                warnings['Debt/Equity'] = "–û–ø–∞—Å–Ω–æ"
            elif 2 <= de <= 3:
                warnings['Debt/Equity'] = "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ"
            else:
                warnings['Debt/Equity'] = "OK"

        if self.total_assets:
            da = self.net_debt / self.total_assets
            multiples['Debt/Assets'] = round(da, 2)
            if da > 0.9:
                warnings['Debt/Assets'] = "–û–ø–∞—Å–Ω–æ"
            elif 0.7 <= da <= 0.9:
                warnings['Debt/Assets'] = "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ"
            else:
                warnings['Debt/Assets'] = "OK"

        return multiples, warnings

    def interpret_warnings(self, warnings):
        conclusions = []
        risk_score = 0

        if warnings.get('Net Debt/EBITDA') == "–û–ø–∞—Å–Ω–æ" or warnings.get('Debt/Equity') == "–û–ø–∞—Å–Ω–æ":
            conclusions.append("‚ö† –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π: –≤—ã—Å–æ–∫–∞—è –¥–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
            risk_score += 2
        if warnings.get('P/E') == "–û–ø–∞—Å–Ω–æ" and warnings.get('P/BV') == "–û–ø–∞—Å–Ω–æ":
            conclusions.append("üìâ –í–æ–∑–º–æ–∂–µ–Ω –ø—É–∑—ã—Ä—å –∏–ª–∏ —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
            risk_score += 2
        if warnings.get('P/E') == "–û–ø–∞—Å–Ω–æ" and warnings.get('P/BV') == "OK":
            conclusions.append("‚ùì –ü—Ä–∏–±—ã–ª—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞, –≤–æ–∑–º–æ–∂–Ω—ã –∏—Å–∫–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")
            risk_score += 1
        if warnings.get('P/FCF') == "–û–ø–∞—Å–Ω–æ":
            conclusions.append("üí∏ –ö–æ–º–ø–∞–Ω–∏—è –ø–ª–æ—Ö–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫")
            risk_score += 1
        if warnings.get('Debt/Assets') == "–û–ø–∞—Å–Ω–æ":
            conclusions.append("üî• –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞ –≥—Ä–∞–Ω–∏ –¥–µ—Ñ–æ–ª—Ç–∞ –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º")
            risk_score += 3

        if not conclusions:
            conclusions.append("‚úÖ –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –ø–æ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ä–∏—Å–∫–∞
        if risk_score == 0:
            risk_level = "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        elif 1 <= risk_score <= 3:
            risk_level = "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        else:
            risk_level = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"

        conclusions.append(f"üèÅ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∏—Å–∫–∞: {risk_level}")

        return conclusions

    def plot_multiples(self):
        multiples, warnings = self.calc_multiples()
        labels = list(multiples.keys())
        values = list(multiples.values())

        plt.figure(figsize=(10, 6))

        colors = []
        for label in labels:
            if warnings.get(label) == "–û–ø–∞—Å–Ω–æ":
                colors.append('red')
            elif warnings.get(label) == "–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–æ":
                colors.append('yellow')
            else:
                colors.append('green')

        bars = plt.bar(labels, values, color=colors)
        plt.title(f"–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {self.name}")
        plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        for bar, label in zip(bars, labels):
            yval = bar.get_height()
            warn = warnings.get(label, "")
            plt.text(bar.get_x() + bar.get_width()/2, yval + 0.1, f"{yval:.2f} ({warn})", ha='center', va='bottom')
        plt.tight_layout()
        plt.show()


# –ü—Ä–∏–º–µ—Ä: –∫–æ–º–ø–∞–Ω–∏—è –ü–æ–ª—é—Å
data_polyus = CompanyData(
    name="–ü–æ–ª—é—Å",
    projected_net_profit=269.1,     # –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    historical_pe=5,
    shares_outstanding=0.1349,
    revenue=603.2,
    operating_expenses=223.3,
    net_debt=622.7,
    interest_rate=0.07,
    total_assets=1200,
    total_equity=550,
    ebitda=370,
    free_cash_flow=250,
    market_cap=1600
)

print(f"–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞ –∞–∫—Ü–∏–π {data_polyus.name}: {data_polyus.fair_price()} —Ä—É–±")
multiples, warnings = data_polyus.calc_multiples()
print(f"–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã {data_polyus.name}: {multiples}")
print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}")

conclusions = data_polyus.interpret_warnings(warnings)
print("–í—ã–≤–æ–¥—ã:")
for c in conclusions:
    print(c)

data_polyus.plot_multiples()
